{"subreddit":{"display_name":"ethereum"},"subreddit_loc":"ethereum","selftext":"Ok folks, you might be shocked to hear, but there are other non Libra-related news to be proclaimed:\n\n&#x200B;\n\nWe finally have a beta release of our VM out, this is the first VM version which is completely written in **TypeScript** ðŸ˜€. This release is nevertheless packed with other goodies, the least visible but maybe most important being a deep reaching rewrite of large parts of the internal structure of the inner virtual machine execution logic.\n\n&#x200B;\n\n**Some tldr;:**\n\n* TypeScript\n* EVM Modularization & Major Refactoring\n* Promise-based API\n* Istanbul Process Start (with a draft EIP-1108 alt\\_bn128 gas cost reduction implementation)\n\n&#x200B;\n\nHere is the full [release description](https://github.com/ethereumjs/ethereumjs-vm/releases/tag/v4.0.0-beta.1):\n\n&#x200B;\n\nSince changes in this release are pretty deep reaching and broadly distributed, we will first drop out one or several `beta` releases until we are confident on both external API as well as inner structural changes. See [v4 branch](https://github.com/ethereumjs/ethereumjs-vm/pull/479) for some major entry point into the work on the release.\n\nIt is highly recommended that you do some testing of your library against this and following `beta` versions and give us some feedback!\n\nThese will be the main release notes for the `v4` feature updates, subsequent `beta` releases and the final release will just publish the delta changes and point here for reference.\n\nBreaking changes in the release notes are preeceeded with `[BREAKING]`, do a search for an overview.\n\nThe outstanding work of [@s1na](https://github.com/s1na) has to be mentioned here. He has done the very large portion of the coding and without him this release wouldn't have been possible. Thanks Sina! ðŸ™‚\n\nSo what's new?\n\n## TypeScript\n\nThis is the first `TypeScript` release of the VM (yay! ðŸŽ‰).\n\n`TypeScript` handles `ES6` transpilation [a bit differently](https://github.com/Microsoft/TypeScript/issues/2719) (at the end: cleaner) than `babel` so `require` syntax of the library slightly changes to:\n\n    const VM = require('ethereumjs-vm').default\n\nThe library now also comes with **type declaration files** distributed along with the package published.\n\n## Relevant PRs\n\n* Preparation, migration of `Bloom`, `Stack` and `Memory`, PR [\\#495](https://github.com/ethereumjs/ethereumjs-vm/pull/495)\n* `StateManager` migration, PR [\\#496](https://github.com/ethereumjs/ethereumjs-vm/pull/496)\n* Migration of precompiles, opcode list, `EEI`, `Message`, `TxContext` to `TypeScript`, PR \\[#497 ([https://github.com/ethereumjs/ethereumjs-vm/pull/497](https://github.com/ethereumjs/ethereumjs-vm/pull/497))\n* Migration of `EVM` (old: `Interpreter`) and exceptions, PR [\\#504](https://github.com/ethereumjs/ethereumjs-vm/pull/504)\n* Migration of `Interpreter` (old: `Loop`), PR [\\#505](https://github.com/ethereumjs/ethereumjs-vm/pull/505)\n* Migration of `opFns` (opcode implementations), PR [\\#506](https://github.com/ethereumjs/ethereumjs-vm/pull/506)\n* Migration of the main `index.js` `VM` class, PR [\\#507](https://github.com/ethereumjs/ethereumjs-vm/pull/507)\n* Migration of `VM.runCode()`, PR [\\#508](https://github.com/ethereumjs/ethereumjs-vm/pull/508)\n* Migration of `VM.runCall()`, PR [\\#510](https://github.com/ethereumjs/ethereumjs-vm/pull/510)\n* Migration of `VM.runTx()`, PR [\\#511](https://github.com/ethereumjs/ethereumjs-vm/pull/511)\n* Migration of `VM.runBlock()`, PR [\\#512](https://github.com/ethereumjs/ethereumjs-vm/pull/512)\n* Migration of `VM.runBlockchain()`, PR [\\#517](https://github.com/ethereumjs/ethereumjs-vm/pull/517)\n* `TypeScript` finalization PR, config switch, PR [\\#518](https://github.com/ethereumjs/ethereumjs-vm/pull/518)\n* Doc generation via `TypeDoc`, PR [\\#522](https://github.com/ethereumjs/ethereumjs-vm/pull/522)\n\n## EVM Modularization and Structural Refactoring\n\n## New Call and Code Loop Structure / EVM Encapsulation\n\nThis release switches to a new class based and promisified structure for working down VM calls and running through code loops, and encapsulates this logic to be bound to the specific `EVM` (so the classical Ethereum Virtual Machine) implementation in the [evm](https://github.com/ethereumjs/ethereumjs-vm/tree/master/lib/evm) module, opening the way for a future parallel `eWASM` additional implementation.\n\nThis new logic is mainly handled by the two new classes `EVM` (old: `Interpreter`) and `Interpreter` (old: `Loop`), see PR [\\#483](https://github.com/ethereumjs/ethereumjs-vm/pull/483) for the initial work on this. The old `VM.runCall()` and `VM.runCode()` methods are just kept as being wrappers and will likely be deprecated on future releases once the inner API structure further stabilizes.\n\nThis new structure should make extending the VM by subclassing and adopting functionality much easier, e.g. by changing opcode functionality or adding custom onces by using an own `Interpreter.getOpHandler()` implementation. You are highly encouraged to play around, see what you can do and give us feedback on possibilities and limitations.\n\n## EEI for Environment Communication\n\nFor interacting with the blockchain environment there has been introduced a dedicated `EEI` (Ethereum Environment Interface) module closely resembling the respective [EEI spec](https://github.com/ewasm/design/blob/master/eth_interface.md), see PR [\\#486](https://github.com/ethereumjs/ethereumjs-vm/pull/486) for the initial work.\n\nThis makes handling of environmental data by the VM a lot cleaner and transparent and should as well allow for much easier extension and modification.\n\n## Changes\n\n* Detached precompiles from the VM, PR [\\#492](https://github.com/ethereumjs/ethereumjs-vm/pull/492)\n* Subdivided `runState`, refactored `Interpreter` (old: `Loop`), PR [\\#498](https://github.com/ethereumjs/ethereumjs-vm/pull/498)\n* \\[BREAKING\\] Dropped `emitFreeLogs` flag, to replace it is suggested to implement by inheriting `Interpreter` (old: `Loop`), PR [\\#498](https://github.com/ethereumjs/ethereumjs-vm/pull/498)\n* Split `EVM.executeMessage()` with `EVM.executeCall()` and `EVM.executeCreate()` for `call` and `create` specific logic (old names: `Interpreter.[METHOD_NAME]()`), PR [\\#499](https://github.com/ethereumjs/ethereumjs-vm/pull/499)\n* Further simplification of `Interpreter`/`EVM` (old: `Loop`/`Interpreter`) structure, PR [\\#506](https://github.com/ethereumjs/ethereumjs-vm/pull/506)\n* \\[BREAKING\\] Dropped `VM.runJit()` in favor of direct handling in `EVM` (old: `Interpreter`), officially not part of the external API but mentioning just in case, PR [\\#515](https://github.com/ethereumjs/ethereumjs-vm/pull/515)\n* Removed `StorageReader`, moved logic to `StateManager`, [\\#534](https://github.com/ethereumjs/ethereumjs-vm/pull/534)\n\n## Istanbul Process Start\n\nWith this release we start the `Istanbul` hardfork integration process and have activated the `istanbul` `hardfork` option for the constructor.\n\nThis is meant to be used experimentation and reference implementations, we have made a start with integrating draft [EIP-1108](https://eips.ethereum.org/EIPS/eip-1108) `Istanbul` candidate support reducing the gas costs for `alt_bn128` precompiles, see PR [\\#539](https://github.com/ethereumjs/ethereumjs-vm/issues/539) for implementation details.\n\nNote that this is still very early in the process since no EIP in a final state is actually accepted for being included into `Istanbul` on the time of release. The `v4` release series will be kept as an experimental series during the process with breaking changes introduced along the way without too much notice, so be careful and tighten the VM dependency if you want to give your users the chance for some early experimentation with some specific implementation state.\n\nOnce scope of `Istanbul` as well as associated EIPs are finalized a stable `Istanbul` VM version will be released as a subsequent major release.\n\n## Code Modernization and Version Updates\n\nThe main API with the `v4` release switches from being `callback` based to using promises, see PR [\\#546](https://github.com/ethereumjs/ethereumjs-vm/pull/546).\n\nHere is an example for changed API call `runTx`.\n\nOld `callback`\\-style invocation:\n\n    vm.runTx(\n      {\n        tx: tx,\n      },\n      function(err, result) {\n        if (err) {\n          // Handle errors appropriately\n        }\n        // Do something with the result\n      },\n    )\n\nPromisified usage:\n\n    try {\n      let result = await vm.runTx({ tx: tx })\n      // Do something with the result\n    } catch (err) {\n      // handle errors appropriately\n    }\n\n## Code Modernization Changes\n\n* Promisified internal usage of async opcode handlers, PR [\\#491](https://github.com/ethereumjs/ethereumjs-vm/pull/491)\n* Promisified `runTx` internals, PR [\\#493](https://github.com/ethereumjs/ethereumjs-vm/pull/493)\n* Promisified `runBlock` internals, restructure, reduced shared global state, PR [\\#494](https://github.com/ethereumjs/ethereumjs-vm/pull/494)\n\n## Version Updates\n\n* Updated `ethereumjs-account` from `2.x` to `3.x`, part of PR [\\#496](https://github.com/ethereumjs/ethereumjs-vm/pull/496)\n\n## Features\n\n* The VM now also supports a [Common](https://github.com/ethereumjs/ethereumjs-common) class instance for chain and HF setting, PRs [\\#525](https://github.com/ethereumjs/ethereumjs-vm/pull/525) and [\\#526](https://github.com/ethereumjs/ethereumjs-vm/pull/526)\n\n## Bug Fixes\n\n* Fixed error message in `runTx()`, PR [\\#523](https://github.com/ethereumjs/ethereumjs-vm/pull/523)\n* Changed default hardfork in `StateManager` to `petersburg`, PR [\\#524](https://github.com/ethereumjs/ethereumjs-vm/pull/524)\n* Replaced `Object.assign()` calls and fixed type errors, PR [\\#529](https://github.com/ethereumjs/ethereumjs-vm/pull/529)\n\n## Development\n\n* Significant blockchain test speed improvements, PR [\\#536](https://github.com/ethereumjs/ethereumjs-vm/pull/536)","title":"EthereumJS VM v4.0.0-beta.1 Release: TypeScript / EVM Modularization / Promises / Istanbul Process Start","subreddit_name_prefixed":"r/ethereum","ups":79,"created":1560968936,"link_flair_background_color":"","id":"c2fdpk","author":{"name":"HolgerD77"},"permalink":"/r/ethereum/comments/c2fdpk/ethereumjs_vm_v400beta1_release_typescript_evm/","url":"https://www.reddit.com/r/ethereum/comments/c2fdpk/ethereumjs_vm_v400beta1_release_typescript_evm/","created_utc":1560940136}