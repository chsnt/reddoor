{"subreddit":{"display_name":"lua"},"subreddit_loc":"принимать","selftext":"Привет / р / Луа,\n\nЯ хотел бы реализовать что-то, что является одновременно «потребителем» и «производителем» чего-то одного за другим на неопределенное время. То, как я думал об этом, это написать что-то вроде этого:\n\nв то время как правда\ncoroutine.resume (потребляют)\ncoroutine.resume (продукция)\nконец\n\nГде `потребление` и` продукты` - это сопрограммы, у которых есть своя собственная «пока истинная петля» с внутренним `coroutine.yield`.\n\nНеважно, что сопрограммы запускаются последовательно. Программа должна просто проверять что-то для потребления, затем производить что-то и так далее.\n\nИз некоторых быстрых исследований я также нашел этот пример: http://www.wellho.net/resources/ex.php4?item=u114/ff2.lua, который также добавляет вызов POSIX `sleep` для предотвращения цикла while из занимая процессор без необходимости.\n\nМой вопрос заключается в том, является ли эта концепция с тремя циклами while true и вызовом `sleep` стандартной практикой или есть ли более эффективные способы реализации этой задачи потребления и публикации.\n\nНапример, мне не очень нравится использование `os.execute`, поэтому я бы предпочел использовать [sleep] <span translate =\" no \"> (http://pubs.opengroup.org/onlinepubs/009695399/ functions / sleep.html) </ span> из оболочки C.\n\nНасколько я понимаю, вся программа будет основана на _polling._ Можно ли будет реализовать это больше на основе событий? Или, может быть, стоит взглянуть на что-то вроде libuv?","title":"Как лучше всего смоделировать чередующийся цикл «потребления-публикации»?","subreddit_name_prefixed":"r/lua","ups":1,"created":1545162515,"link_flair_background_color":"","id":"a7admg","author":{"name":"Devirichu"},"permalink":"/r/lua/comments/a7admg/how_best_to_model_an_alternating_consumepublish/","url":"https://www.reddit.com/r/lua/comments/a7admg/how_best_to_model_an_alternating_consumepublish/","created_utc":1545133715}