{"subreddit":{"display_name":"lua"},"subreddit_loc":"принимать","selftext":"Изменить: [вот функция после ваших предложений]  (https://www.reddit.com/r/lua/comments/az1eal/help_refactor_a_function/ei4z6ej) \n\nХия. Я пишу пользовательскую библиотеку для Love2d (поэтому использую LuaJIT), и мне нужна помощь для удаления функции, которая у меня есть.\n\nВот соответствующий код:\n\n    local stackLimit = 256\n    локальный стек = {}\n    \n    местный этаж, мин., макс. = математический этаж, математический минимум, математический максимум\n    \n    локальный функциональный раунд (x) конец пола (x + 0.5) конец\n    \n    сумма локальной функции (t)\n        local s, len = 0, #t\n        для я = 1, лен до\n            s = s + t [i]\n        конец\n        возврат с\n    конец\n    \n    локальные отношения функций (доступно, ...)\n        подтвердить (выбрать ('#', ...)> 0)\n        локальные веса = тип (...) == \"таблица\" и (...) или {...}\n        \n        local local_amounts = {}\n        local total_weights = сумма (вес)\n        \n        для меня вес в ipairs (весов) сделать\n            местный р\n            если total_weights> 0, то\n                p = вес / общая масса\n            еще\n                р = 0\n            конец\n            \n            distrib_amount = round (p * доступно)\n            table.insert (distrib_amounts, distrib_amount)\n            total_weights = total_weights - вес\n            доступно = доступно - распределено\n        конец\n        \n        вернуть распределенные\n    конец\n    \n    местный lgw, lgh = love.graphics.getWidth, love.graphics.getHeight\n    локальная функция push (x1, y1, x2, y2)\n        assert (#stack <stackLimit, 'ui.push (): превышен лимит стека. Вы забыли ui.pop ()?')\n        x1, y1, x2, y2 = x1 или 0, y1 или 0, x2 или lgw (), y2 или lgh ()\n        table.insert (стек, {x1, y1, x2, y2})\n    конец\n    \n    локальная функция pop (n)\n        n = n или 1\n        assert (#stack> = n, 'ui.pop (): выдавалось слишком много раз.')\n        local len = #stack + 1\n        для i = 1, n до\n            стек [len - i] = ноль\n        конец\n    конец\n    \n    локальный горизонтальный = {вертикальный = ложный, горизонтальный = истинный}\n    срез локальной функции (макет, р)\n        макет = горизонтальный [макет]\n        локальный x1, y1, x2, y2 = распаковать (стек [#stack])\n        \n        местный d1, d2, s1, s2\n        если расположение, то d1, d2, s1, s2 = x1, x2, y1, y2, иначе d1, d2, s1, s2 = y1, y2, x1, x2 end\n        \n        местный w = d2 - d1\n        \n        местный лен = #r\n        \n        - Взломанный в px\n        \n        местное rsum, ssum = 0, 0\n        локальные rwidths, swidths = {}, {}\n        для я = 1, лен до\n            местный ri = r [i]\n            если type (ri) == 'string', то\n                локальный n = ri: lower (): match ('([% d%.% -% +] +)% s * px')\n                assert (n, 'ui.slice (): невозможно проанализировать число коэффициентов')\n                n = тоннамер (n) / (w - 1)\n                r [i] = n\n                ssum = ssum + n\n            еще\n                table.insert (rwidths, {i, ri})\n                rsum = rsum + ri\n            конец\n        конец\n        \n        для j = 1, #rwidths делают\n        local i, ri = unpack (rwidths [j])\n        r [i] = ri / rsum * (1 - ssum)\n        конец\n    \n        - Конец взлома\n        \n        локальная ширина = отношения (w, r)\n        \n        местные границы = {d1}\n        для я = 1, лен до\n        границы [i + 1] = границы [i] + ширина [i]\n        конец\n        \n        если макет то\n        для i = len, 1, -1 до\n                нажать (границы [i], y1, границы [i + 1], y2)\n        конец\n        еще\n        для i = len, 1, -1 до\n                нажать (x1, границы [i], x2, границы [i + 1])\n        конец\n        конец\n    конец\n\nФункция, о которой я говорю, это `slice '. Эта функция принимает набор значений из стека (`x1, y1, x2, y2` \\ - текущие границы / прямоугольник, с которым мы работаем), и ей нужно разбить этот прямоугольник на` # r` количество прямоугольников основанный на весах в `r` и поместите их в стек. Это было бы довольно просто, но теперь я добавил функцию, где вы можете определить вес как `(число) px`, и, как вы можете видеть, я добавил эту уродливую часть, где я конвертирую значения пикселей в веса.\n\n\n\nФункция «отношения» (под плохим названием «веса» будет иметь больше смысла) принимает целое число «доступно» и набор весов и возвращает набор целых чисел, которые распределены из «доступны», на основе весов.\n\n\n\nИтак, мой вопрос: как я могу написать функцию `slice` лучше? Кстати, я могу добавить больше модификаторов, чем «px» в будущем.","title":"Помогите рефакторинг функции?","subreddit_name_prefixed":"r/lua","ups":4,"created":1552149058,"link_flair_background_color":"","id":"az1eal","author":{"name":"IcyLavah"},"permalink":"/r/lua/comments/az1eal/help_refactor_a_function/","url":"https://www.reddit.com/r/lua/comments/az1eal/help_refactor_a_function/","created_utc":1552120258}