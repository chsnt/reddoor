{"subreddit":{"display_name":"lua"},"subreddit_loc":"принимать","selftext":"В настоящее время я использую LuaJ. Это чистый порт Lua для языка Java, максимально приближенный к оригиналу (без нативов, JNI и т. Д.).\n\n\nМне просто интересно узнать общее мнение сообщества Lua в целом, а также мысли и критику от людей, которые использовали LuaJ специально. Существует ряд различных фундаментальных вещей, таких как, как работают пользовательские данные (если честно, то, что они самые чистые).\n\nJVM: идентификатор экземпляра для объекта JVM\n\nC Lua: намного более низкий уровень за счет строгого выделения памяти указателем и размером в байтах.\n\n\nТаким образом, в vanilla C Lua вы отвечаете за заполнение, перераспределение и организацию. Я почти уверен, что вы можете использовать управляемые C и CPP, но все необязательно. В LuaJ JVM делает все это с Объектом, естественно. Как естественное следствие, LuaJ оказывается Lua, управляемым сзади JVM. Userdata - это LuaJ, если вы об этом думаете. Сборка мусора из JVM может пострадать в большем количестве областей, хотя из-за ненулевых ссылок, которые являются простыми старыми ссылками Java, как и все остальное. Тем не менее, это не должно беспокоить, если вы все делаете правильно, и программируйте тщательно.\n\nНе забудьте те изящные методы принуждения, которые включены для автоматического преобразования экземпляров Object в таблицы со всеми предварительно созданными функциями и типами (я считаю, что реализация «как есть» опасна для сред песочницы, поскольку это приведение является глубоким и повторяется для дальнейших возвращаемых типов - - осторожность, правила личного кодирования или легкий моддинг для основного кода LuaJ необходимы для предотвращения выхода пользователей из намеченного API).\n\n\nДа ... разные. Может быть, кто-нибудь может дать мне несколько предупреждений, чего ожидать по пути? У меня есть проект, который интенсивно использует эту библиотеку. Я говорю взад-вперед вызовы Lua / Java, много раз в секунду, с ** двумя ** отдельными экземплярами глобалов LuaJ в двух отдельных потоках. Пока что это благословение. Лучший язык сценариев, смешанный с дорогой старой Java. Я тоже ничего не компилирую, не оптимизирую и не минимизирую. Просто загрузите и запустите открытый текст (из памяти моего собственного детища Java VFS, его кеширования и пользовательской функции включения). Работает быстрее, чем вы думаете, если вы не видели это в действии. Я не слишком сильно выскакиваю пользовательские данные из экземпляров Java, но из того, что я вижу, это возможно. Даже если вы делаете это с классами без подготовки во время выполнения, есть какая-то привязка. Я не смотрел слишком глубоко, но я предполагаю, что это позволит избежать слишком большого повторения java.reflect снова и снова (поправьте меня, если я ошибаюсь в этом).\n\n\nLuaJ заявляет, что поддерживает до спецификации 5.2.x, и это все, что мне нужно в Lua ... пока.","title":"LuaJ кто-нибудь?","subreddit_name_prefixed":"r/lua","ups":6,"created":1556718824,"link_flair_background_color":"","id":"bjdrlj","author":{"name":"dimmskii"},"permalink":"/r/lua/comments/bjdrlj/luaj_anyone/","url":"https://www.reddit.com/r/lua/comments/bjdrlj/luaj_anyone/","created_utc":1556690024}