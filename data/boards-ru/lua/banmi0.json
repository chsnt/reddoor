{"subreddit":{"display_name":"lua"},"subreddit_loc":"принимать","selftext":"Здравствуйте все,\n\nУ меня есть проект, который генерирует музыку в разных стилях. Каждый стиль музыки - это отдельный файл, и все различные типы музыкальных файлов используют функции, хранящиеся в общем месте.\n\nЯ хочу создать новый файл, который вызывает несколько музыкальных файлов стиля с аргументами и передает значения обратно в новый файл (для использования в последующих файлах). Для упрощенного примера давайте начнем с `main.lua` (Lua 5.3.5)\n\n    os.execute (\"lua foo.lua -hello\")\n    печать (вещь)\n\nи `foo.lua`\n\n    местный бар = {...}\n    печать (бар [1])\n    вещь = \"вещи\"\n\nКогда я запускаю `main.lua`, я получаю следующее:\n\n    -Привет\n    ноль\n\nНа что я надеюсь это:\n\n    -Привет\n    материал\n\nЯ пробовал всевозможные варианты, используя `dofile`,` loadfile`, `require` и` os.execute`. И либо я не могу передать аргументы, либо я не могу передать переменную обратно в main.lua.\n \nЯ уверен, что я мог бы заставить это работать, записав во временный файл и загрузив его в `foo.lua` (или запишите значения, которые я хочу передать обратно в файл tmp, чтобы` main.lua` прочитал), но я надеялся не делать этого.\n\nИ я предполагаю, что люди совершают одни и те же вещи, но используют другой подход, поэтому я открыт для этого. Следует иметь в виду, что я создал каждый из этих файлов для большого количества аргументов командной строки, так как предполагал, что это облегчит задачу. Тем не менее, новый файл `main.lua` не принимает никаких аргументов (по крайней мере, сейчас, но я думаю, что это может измениться). В будущем я напишу интерфейс, который будет вызывать любой из этих музыкальных файлов, который хочет пользователь, со всеми параметрами, выбранными пользователем, указанными в качестве аргументов командной строки. Или это был план.\n\nСпасибо\n\n** Решение: ** Таким образом, `loadfile` является решением. В моем файле `main.lua`, который должен вызывать несколько других программ lua, у меня есть строка вроде:\n\n    loadfile (\"mesostic.lua\") (\"- c full_text song_sappho -c spine wine -n ​​3 -c word_rule linear -c wing_rule окружающий -c пунктуация_rule да -c полужирный да -c стиль merce -sc\")\n\nЭто много вариантов, которые необходимо пропустить. Проблема с этим, в отличие от непосредственного выполнения `args = {...}`, заключается в том, что все параметры метода `loadfile` обрабатываются как один элемент в таблице, тогда как версия` args` разделяет все аргументы на отдельные элементы в таблице, разделяющие их на пробелы.\n\nИтак, в моей функции разбора arg у меня есть эти две строки:\n\n       local tmp = table.concat (args, \"\")\n       локальные аргументы = string.split (tmp, \"\")\n\nТеперь таблица «arguments» содержит каждую опцию как отдельный элемент в этой таблице. Оттуда я просто анализирую эту таблицу так же, как я делал с `args`.\n\nПриятно то, что это работает независимо от того, используете ли вы `args` обычным способом или с помощью метода` loadfile`.\n\nЯ не знаю, есть ли какие-либо непредвиденные последствия для этого подхода, но на данный момент он выдерживает мои испытания.","title":"Выполнение внешнего файла с аргументами и передача переменных обратно в исходный файл","subreddit_name_prefixed":"r/lua","ups":3,"created":1554714937,"link_flair_background_color":"","id":"banmi0","author":{"name":"davethecomposer"},"permalink":"/r/lua/comments/banmi0/executing_external_file_with_arguments_and/","url":"https://www.reddit.com/r/lua/comments/banmi0/executing_external_file_with_arguments_and/","created_utc":1554686137}