{"subreddit":{"display_name":"lua"},"subreddit_loc":"принимать","selftext":"Здравствуйте все.\n\nЯ относительно новичок в Lua, и я привыкаю к ​​нему, но у меня все еще есть несколько вопросов о вещах, которые мне еще не ясны, относительно пространств имен, скрытия внутренних API и предотвращения потенциальных конфликтов имен с другими пакетами Lua в LuaRocks. , Я приехал в Lua с опытом работы с C #, поэтому я буду использовать этот язык как ссылку на мои вопросы. Спасибо!\n\n# Тема I: Внутренние API в Lua\n\nВ C # мы могли скрывать внутренние API, чтобы они были общедоступными только внутри самой библиотеки. Такие члены имеют префикс с внутренним модификатором в их объявлении. Однако в Lua, пока файл видим в файловой системе, модуль автоматически становится доступным для внешнего использования по требованию, как если бы он был частью стабильного общедоступного API, поставляемого с пакетом.\n\nЯ не хочу показывать внутренние модули в общедоступном API, потому что мне нужно обеспечить будущие изменения в них при необходимости, не нарушая чужой код. В идеале я хочу, чтобы Lua отклонил требование к внутренним модулям от внешних модулей, которые не принадлежат моему пакету / библиотеке.\n\nВ C # есть атрибут `[Obsolete]`, который можно присоединить к любому члену класса / интерфейса с перенаправлением на более новый API, также уведомление автоматически генерируется в документации.\n\n1. ** Как я могу запретить пользователям требовать внутренние модули в пакетах Lua? **\n2. ** Как я могу пометить функции / таблицы как устаревшие / устаревшие в LDoc для создания согласованных форматированных уведомлений и перенаправления пользователей на их соответствующие современные API-интерфейсы? **\n\n# Тема II: Пространства имен в Lua\n\nЯ также занимаюсь пространством имен. В C # пространства имен используются для идентификации пакетов Nuget и библиотек, которые были предоставлены различными поставщиками / разработчиками, и они обычно имеют префикс как таковой. Это замечательно, потому что многие разработчики могут предложить решения для подобных проблем без путаницы или столкновений с рекламой. В Lua, кажется, нет такого стандарта или практики.\n\n1. ** Является ли добавление корневого пространства имен для указания поставщика приемлемой практикой среди разработчиков Lua? **\n2. ** В чем разница между ** `.` ** и **` / `** в **` require` ** путях, и какой из приведенных ниже является наилучшей практикой организации проектов Lua в разные пространства имен? **\n   1. `require (\" vender.project.foo.bar.module \")`\n   2. `require (\" vendor.project \"). Foo.bar.module`\n   3. `require (\" vendor / project / foo / bar / module \")`\n   4. `require (\" vendor / project \"). Foo.bar.module`","title":"Как организовать пространства имен в Lua и скрыть внутренние модули от открытого API в моих пакетах?","subreddit_name_prefixed":"r/lua","ups":4,"created":1564645589,"link_flair_background_color":"","id":"ckgfo3","author":{"name":"david-tamar"},"permalink":"/r/lua/comments/ckgfo3/how_to_organize_namespaces_in_lua_and_hide/","url":"https://www.reddit.com/r/lua/comments/ckgfo3/how_to_organize_namespaces_in_lua_and_hide/","created_utc":1564616789}