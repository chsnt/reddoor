{"subreddit":{"display_name":"lua"},"subreddit_loc":"принимать","selftext":"Привет всем,\n\nВ моей программе я собрал свой собственный анализатор командной строки. Кажется, работает довольно хорошо. Я использую Lua 5.3.5.\n\nЭто не Posix, ни GNU-совместимый. В частности, у меня есть одна опция аргумента `c`, которая позволяет пользователю устанавливать произвольные значения таблицы для глобальной таблицы,` command`, которая используется для множества различных целей. Например:\n\n    lua main.lua -c случайный да\n\nприведет к следующему:\n\n    command.random = \"yes\"\n\nСтрока, которая делает это в моей функции синтаксического анализа, выглядит следующим образом:\n\n    если arguments [counter] == \"-c\", то команда [arguments [counter +1]] = аргументы [counter +2] end\n\nПроблема в том, что я пытаюсь передать многомерный массив:\n\n    lua main.lua -c random [3] [2] да\n\nЭто не приводит к `command.random [3] [2] =\" yes \"`, как я надеюсь.\n\nУ кого-нибудь есть идеи о том, как это сделать? Может быть, что-то с командой `load`? Если мне нужно создать более сложный алгоритм синтаксического анализа для этого конкретного случая, я могу это сделать, но надеялся на что-то более элегантное.\n\n----\n\nВ случае, если кому-то интересно узнать о моем общем подходе, моя программа превращается в одну основную программу, которая вызывает любую из тысяч (в конечном итоге, сейчас только 20) других программ для создания различных стилей музыки, текста или искусства со всеми параметры передаются в качестве аргументов командной строки. Каждая из этих программ имеет свой собственный набор уникальных опций (и множество опций, которые являются общими для всех). Для этих уникальных опций я выбрал вышеупомянутое решение, чтобы мне не пришлось придумывать тысячи уникальных сокращений для моего анализатора командной строки. Как я уже говорил выше, это очень хорошо работает для простых примеров (например, `command.random`), но не для массивов с большим количеством измерений.\n\nСпасибо!\n\n** Обновление: ** Это «не элегантное» решение работает, но имеет ограничения:\n\n    если аргументы [counter] == \"-c2\" тогда\n      local tmpa = tonumber (аргументы [счетчик +2])\n      local tmpb = tonumber (аргументы [счетчик +3])\n      команда [arguments [counter +1]] [tmpa] [tmpb] = arguments [counter +4]\n    конец\n\nЧтобы использовать это:\n\n    lua main.lua -c random 3 2 \"да\"\n\nХотя я не планирую, чтобы массивы выходили за пределы этих измерений, мне нужно создать еще один фрагмент кода для \"-c1\" и любого другого измерения, которое я хочу. Я мог бы, вероятно, проанализировать значение \"-cX\" и создать цикл вместо этого. Я мог бы также сохранить оригинальный синтаксис и разобрать скобки.","title":"Передача аргументов и многомерных массивов","subreddit_name_prefixed":"r/lua","ups":3,"created":1556193907,"link_flair_background_color":"","id":"bh49g0","author":{"name":"davethecomposer"},"permalink":"/r/lua/comments/bh49g0/passing_arguments_and_multidimensional_arrays/","url":"https://www.reddit.com/r/lua/comments/bh49g0/passing_arguments_and_multidimensional_arrays/","created_utc":1556165107}