{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"Привет / р / Kotlin!\n\nУ меня есть быстрый вопрос о сопрограммах, который я пытаюсь полностью понять, и я думаю, что это может быть даже в конечном итоге о потоке в целом. Я объясню свой быстрый пример использования и затем приведу 2 примера, которые я использую, чтобы попытаться сравнить мои теории.\n\nВариант использования: я пытаюсь выполнить вызов GET в 1000 раз как можно быстрее, и мне плевать на результат вызова - мне просто нужно как можно быстрее выполнить 1000 запросов GET.\n\nПример 1: Нет потоков\n\n    fun main () {\n    val currentTime = System.currentTimeMillis ()\n    для (я в 0..999) {\n    URL ( \"https://www.google.com/\") .readText ()\n    }\n    val newTime = System.currentTimeMillis ()\n    println (\"$ {newTime - currentTime} мс\")\n    }\n\nПример 2: сопрограммы\n\n    fun main () = runBlocking {\n    Println ( \"старт\")\n    val startTime = System.currentTimeMillis ()\n    coroutineScope {\n    repeat (1_000) {// запустить много сопрограмм\n    запуск {\n    URL ( \"https://www.google.com/\") .readText ()\n    }\n    }\n    }\n    val endTime = System.currentTimeMillis ()\n    Println ( \"стоп\")\n    println («Время: $ {endTime - startTime} мс»)\n    }\n\nТекущие тесты: например, 1 без потоков, я вижу, что это занимает в среднем от 9 до 10 секунд после 10 запусков. Например, 2 с сопрограммами, я вижу, что после 10 запусков в среднем это занимает от 11 до 12 секунд. Фактические времена не так важны, как тот факт, что «многопоточный» пример выглядит в среднем медленнее, чем «непоточный».\n\nЯ предполагаю, что это в основном из-за накладных расходов на раскрутку сопрограммы по сравнению с последовательным / непотоковым подходом? Это или мой синтаксис просто совершенно неверен, и он не работает, как я ожидаю.\n\nМои текущие вопросы:\n\n* Является ли мой синтаксис / базовое понимание сопрограмм разумным в этом примере?\n* Является ли пример без резьбы, который я публикую, фактически выполняя цикл for параллельно, как это возможно? Если так, как это работает? Смысл, почему это не блокирует?\nЕсть ли способ запустить запрос в Kotlin, который не включает вызов readText (), который, как я полагаю, замедляет этот конкретный пример, потому что он ожидает ответа?\n\nНекоторые из этих вопросов - довольно интересные вопросы начального уровня, поэтому я извиняюсь за новичок здесь. Я никогда не садился и не пытался понять, как правильно их писать, пока не начал изучать Kotlin и сопрограммы. Я очень хорошо знаком с концепцией потоков и тем, как они работают, но я довольно плохо знаком с идеей сопрограмм и их отношением к потокам. Я просто пытаюсь проверить работоспособность этого конкретного примера как можно быстрее. Это просто я пытаюсь создать надуманный пример, чтобы показать свое понимание, и все, что я узнал до сих пор, - это то, что я понятия не имею, что я делаю, что означает, что обучение не за горами!\n\nБольшое спасибо за ваше время! Я буду рядом, чтобы ответить на дальнейшие уточняющие вопросы / ответить на любые комментарии.\n\n\n\n\\*\\*ОБНОВИТЬ\\*\\*\nЯ думаю, я заставил ее работать!\n\n    fun main () = runBlocking {\n    Println ( \"старт\")\n    val startTime = System.currentTimeMillis ()\n    repeat (1_000) {// запустить много сопрограмм\n    запуск {\n    URL ( \"HTTP: // локальный: 8080 / пользователей\") .readText ()\n    }\n    }\n    val endTime = System.currentTimeMillis ()\n    Println ( \"стоп\")\n    println («Время: $ {endTime - startTime} мс»)\n    }\n\nЯ создал небольшой локальный API для проверки того, что он на самом деле отправляет 1000 запросов, и на самом деле он отправляет 1000 запросов GET, как я ожидал, и общее время выполнения составляет около 23 мс, что является огромным улучшением за 10 секунд.\n\n\nНасколько я понимаю, удалив лишнюю область сопрограммы изнутри области видимости runBlocking {}, она позволяет запускаться без блокировки вообще? Я просто неправильно понял основной пример Kotlin:\n\n\n    fun main () = runBlocking {\n        repeat (100_000) {// запустить много сопрограмм\n            запуск {\n                Задержка (1000L)\n                Распечатать(\".\")\n            }\n        }\n    }\n\nПотому что я думал, что это на самом деле не поддержит сопрограммы живыми, но похоже, что сейчас это так, как я хочу. Я буду продолжать возиться с этим, но любые советы и т. Д. Все еще приветствуются.\n\n\nСпасибо!","title":"Вопрос о потоке / сопрограммах","subreddit_name_prefixed":"r/Kotlin","ups":9,"created":1559171982,"link_flair_background_color":"","id":"bufyiw","author":{"name":"rpgbandit"},"permalink":"/r/Kotlin/comments/bufyiw/question_about_threadingcoroutines/","url":"https://www.reddit.com/r/Kotlin/comments/bufyiw/question_about_threadingcoroutines/","created_utc":1559143182}