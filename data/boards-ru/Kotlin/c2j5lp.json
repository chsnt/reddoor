{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Kotlin","selftext":"","title":"Kotlin 1.3.40 released","subreddit_name_prefixed":"r/Kotlin","ups":105,"created":1560990331,"link_flair_background_color":"","id":"c2j5lp","author":{"name":"dayanruben"},"permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/","url":"https://blog.jetbrains.com/kotlin/2019/06/kotlin-1-3-40-released/","created_utc":1560961531,"replies":[{"ups":19,"link_id":"t3_c2j5lp","replies":[{"ups":1,"link_id":"t3_c2j5lp","replies":[{"ups":1,"link_id":"t3_c2j5lp","replies":[{"ups":1,"link_id":"t3_c2j5lp","id":"erproxl","author":"supersagacity","parent_id":"t1_erpqcql","subreddit_id":"t5_2so2r","body":"I'm seeing it create the nodejs folders but it doesn't actually put anything in there. Oh well. Still cool you have this demo up and running!\n\nI'm having a hard time finding some decent documentation, though. A lot of projects are using Gradle < 5 (or no Gradle at all - just using IntelliJ to build!), or using the frontend plugin which is apparently now obsolete?\n\nHopefully everything will mature a bit in the next few months.","body_html":"<div class=\"md\"><p> Я вижу, как он создает папки nodejs, но на самом деле он ничего не помещает туда. Ну что ж. Все еще круто, у вас есть это демо и работает! </p><p> Но мне трудно найти приличную документацию. Многие проекты используют Gradle &lt;5 (или вообще не используют Gradle - просто используют IntelliJ для сборки!) Или используют плагин внешнего интерфейса, который сейчас явно устарел? </p><p> Надеюсь, что в ближайшие несколько месяцев все немного повзрослеет. </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erproxl/","name":"t1_erproxl","created":1561155159,"created_utc":1561126359,"subreddit_name_prefixed":"r/Kotlin","depth":6}],"id":"erpocv1","author":"supersagacity","parent_id":"t1_erplb7r","subreddit_id":"t5_2so2r","body":"Hmm, still not working. It's complaining that my version of Node (12.3.1) is too old and I should probably upgrade to a newer version, like 11 :)\n\nSo I guess there's maybe an incompatibiliy there... I'll try to do some more hacking when I have a bit of time.\n\nWhat would you replace Parcel with, btw? It's doing more than just the Kotlin bundling, I suppose? (also bundling, etc)","body_html":"<div class=\"md\"><p> Хм, все еще не работает. Жалуется, что моя версия Node (12.3.1) слишком старая, и мне, вероятно, следует обновить ее до более новой версии, например 11 :) </p><p> Так что я думаю, что там может быть несовместимость ... Я постараюсь сделать еще немного взлома, когда у меня будет немного времени. </p><p> Чем бы вы заменили Parcel, кстати? Полагаю, это не просто комплектация Kotlin? (также комплектация и т. д.) </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erpocv1/","name":"t1_erpocv1","created":1561152683,"created_utc":1561123883,"subreddit_name_prefixed":"r/Kotlin","depth":4}],"id":"erpkjut","author":"supersagacity","parent_id":"t1_erpakvk","subreddit_id":"t5_2so2r","body":"That sounds pretty interesting! I gave your 'hello world' repository a try, unfortunately it fails on gradlew build (build/kotlin-js-min/main/output.js:5:36: Cannot resolve dependency 'kotlin') and I have the feeling that that's currently the status of most of the Kotlin/JS ecosystem :)\n\nIs there anything specific I'd need to do to get this to compile?","body_html":"<div class=\"md\"><p> Это звучит довольно интересно! Я попробовал ваш репозиторий &#39;hello world&#39;, к сожалению, он не работает при сборке gradlew (build / kotlin-js-min / main / output.js: 5: 36: не удается разрешить зависимость &#39;kotlin&#39;), и у меня есть ощущение, что это в настоящее время статус большинства экосистемы Kotlin / JS :) </p><p> Что-нибудь конкретное, что мне нужно сделать, чтобы это скомпилировать? </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erpkjut/","name":"t1_erpkjut","created":1561149461,"created_utc":1561120661,"subreddit_name_prefixed":"r/Kotlin","depth":2}],"id":"erkobp6","author":"supersagacity","parent_id":"t3_c2j5lp","subreddit_id":"t5_2so2r","body":"Is anyone already using Kotlin/JS to build largish frontend applications? I'd love to be able to go full Kotlin to replace my Angular apps.","body_html":"<div class=\"md\"><p> Кто-нибудь уже использует Kotlin / JS для создания больших приложений веб-интерфейса? Я хотел бы иметь возможность полностью использовать Kotlin, чтобы заменить мои приложения Angular. </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erkobp6/","name":"t1_erkobp6","created":1560996614,"created_utc":1560967814,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":10,"link_id":"t3_c2j5lp","replies":[{"ups":16,"link_id":"t3_c2j5lp","replies":[{"ups":2,"link_id":"t3_c2j5lp","id":"ero5wa9","author":"xfel11","parent_id":"t1_ero50b4","subreddit_id":"t5_2so2r","body":"GSON, for example, has two methods to parse a JSON string into an object:\n\n    <T> T\tfromJson(java.lang.String json, java.lang.Class<T> classOfT)\n    <T> T\tfromJson(java.lang.String json, java.lang.reflect.Type typeOfT)\n\nIf I want to preserve generics, I'd use the second method:\n\n    inline fun <reified T> Gson.fromJson(json: String): T = fromJson(json, typeOf<T>().javaType)\n\nUnfortunately, as mentioned in my other comment, typeOf<T>().javaType doesn't actually work yet. We'll likely have to wait for the next version if we want a fix.\n\nWorkarounds are possible, obviously. I hacked together a bit of untested code I can share if anybody is interested.","body_html":"<div class=\"md\"><p> Например, GSON имеет два метода для анализа строки JSON в объекте: </p><pre> <code>&lt;T&gt; T fromJson(java.lang.String json, java.lang.Class&lt;T&gt; classOfT) &lt;T&gt; T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT)</code> </pre><p> Если я хочу сохранить дженерики, я бы использовал второй метод: </p><pre> <code>inline fun &lt;reified T&gt; Gson.fromJson(json: String): T = fromJson(json, typeOf&lt;T&gt;().javaType)</code> </pre><p> К сожалению, как уже упоминалось в моем другом комментарии, typeOf &lt;T&gt; (). JavaType на самом деле еще не работает. Нам, вероятно, придется ждать следующей версии, если мы хотим исправить. </p><p> Обходы возможны, очевидно. Я взломал немного непроверенного кода, которым могу поделиться, если кому-то интересно. </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/ero5wa9/","name":"t1_ero5wa9","created":1561097859,"created_utc":1561069059,"subreddit_name_prefixed":"r/Kotlin","depth":4}],"id":"erlchxl","author":"xfel11","parent_id":"t1_erlbr4f","subreddit_id":"t5_2so2r","body":"Say you have a function to parse some kind of data (ie JSON) into arbitrary objects. In Java, the signature would look something like this:\n\n    public <T> T parse(Class<T> type);\n\nsince Java doesn't know the type of T inside the function. Kotlin has reified types as a workaround:\n\n    inline fun <reified T> parse(): T = parse(T::class.java)\n\nYou can also do a lot more fancy stuff with it. Now, let's imagine you want to parse a list of numbers. The problem now is that T::class get's rid of any generic type parameters. So, if T is List<Double>, T::class just gives list. There are workarounds using some Java trickery, but those don't work properly with the kotlin reflection library.\n\nThis is where the update comes in. typeOf<List<Double>>() returns a KType which also holds the fact that the list has Doubles as elements.","body_html":"<div class=\"md\"><p> Скажем, у вас есть функция для анализа данных (например, JSON) в произвольные объекты. В Java подпись будет выглядеть примерно так: </p><pre> <code>public &lt;T&gt; T parse(Class&lt;T&gt; type);</code> </pre><p> так как Java не знает тип T внутри функции. У Kotlin есть определенные типы как обходной путь: </p><pre> <code>inline fun &lt;reified T&gt; parse(): T = parse(T::class.java)</code> </pre><p> Вы также можете сделать намного больше модных вещей с ним. Теперь давайте представим, что вы хотите разобрать список чисел. Теперь проблема в том, что T :: class избавляется от любых параметров универсального типа. Таким образом, если T является List &lt;Double&gt;, T :: class просто дает список. Есть обходные пути, использующие некоторые хитрости Java, но они не работают должным образом с библиотекой отражений kotlin. </p><p> Вот где приходит обновление. TypeOf &lt;List &lt;Double &gt;&gt; () возвращает KType, который также содержит тот факт, что список имеет Doubles в качестве элементов. </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erlchxl/","name":"t1_erlchxl","created":1561012416,"created_utc":1560983616,"subreddit_name_prefixed":"r/Kotlin","depth":2}],"id":"erl3h7f","author":"xfel11","parent_id":"t3_c2j5lp","subreddit_id":"t5_2so2r","body":"Yes! Reified KType literals!","body_html":"<div class=\"md\"><p> Да! Реализованные литералы KType! </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erl3h7f/","name":"t1_erl3h7f","created":1561006213,"created_utc":1560977413,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":4,"link_id":"t3_c2j5lp","id":"erkledi","author":"ValueNull","parent_id":"t3_c2j5lp","subreddit_id":"t5_2so2r","body":"The Gradle npm integration is great","body_html":"<div class=\"md\"><p> Великолепная интеграция Gradle npm </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/erkledi/","name":"t1_erkledi","created":1560994819,"created_utc":1560966019,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":2,"link_id":"t3_c2j5lp","id":"ermb1q1","author":"jbristow","parent_id":"t3_c2j5lp","subreddit_id":"t5_2so2r","body":"Hmm, the Java package name legality parsing still seems broken. I filed a bug for this, but it was closed as fixed and I'm confused as to why this code doesn't work... maybe someone here can explain it:\n\n```\nimport org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal\n\n// ERROR: __, ___, ____, ... are reserved in kotlin\n// WARN: Remove redundant backticks.\nimport org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.`__`\n\n// WARN: Remove redundant backticks.\nimport org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.`__`.properties\n\n// Works fine.\nimport org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.`__` as US\nimport org.apache.tinkerpop.gremlin.structure.Vertex\n\nvar g: GraphTraversal<*, *>? = null\n\nfun main() {\n    g?.V(\"1\")?.union<String>(\n            properties<Vertex, String>(\"a\").value(),\n            // WARN: Remove redundant backticks.\n            `__`.properties<Vertex, String>(\"b\").value(),\n            US.properties<Vertex, String>(\"c\").value()\n    )\n}\n```\n\n(the library that the package in question is from is `org.apache.tinkerpop:gremlin-driver:3.2.10`, if you're curious)","body_html":"<div class=\"md\"><p> Хм, синтаксический анализ легальности имени пакета Java все еще кажется нарушенным. Я подал ошибку для этого, но она была закрыта как исправлена, и я не понимаю, почему этот код не работает ... может быть, кто-то здесь может объяснить это: </p><p> `` `import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal </p><p> // ОШИБКА:, <strong>__ <em>, _</em></strong> , ... зарезервированы в kotlin // ПРЕДУПРЕЖДЕНИЕ: удаление лишних обратных галочек. import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph. <code>__</code> </p><p> // ПРЕДУПРЕЖДЕНИЕ. Удалите лишние галочки. import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph. <code>__</code> свойства </p><p> // Работает отлично. import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph. <code>__</code> как импорт из США org.apache.tinkerpop.gremlin.structure.Vertex </p><p> var g: GraphTraversal &lt;*, *&gt;? = ноль </p><p> fun main () {g? .V (&quot;1&quot;) ?. union &lt;String&gt; (свойства &lt;Vertex, String&gt; (&quot;a&quot;). value (), // ПРЕДУПРЕЖДЕНИЕ: удаление лишних обратных галочек. <code>__</code> .properties &lt;Vertex , String&gt; (&quot;b&quot;). Value (), US.properties &lt;Vertex, String&gt; (&quot;c&quot;). Value ())} `` ` </p><p> (библиотека, из которой <code>org.apache.tinkerpop:gremlin-driver:3.2.10</code> рассматриваемый пакет <code>org.apache.tinkerpop:gremlin-driver:3.2.10</code> , если вам интересно) </p></div>","permalink":"/r/Kotlin/comments/c2j5lp/kotlin_1340_released/ermb1q1/","name":"t1_ermb1q1","created":1561042180,"created_utc":1561013380,"subreddit_name_prefixed":"r/Kotlin","depth":0}]}