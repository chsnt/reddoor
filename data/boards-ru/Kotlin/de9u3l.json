{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"Рассмотрим следующий код:\n\n    class IntList: ArrayList <Int> () {\n        fun foo () {\n            печать ( «бар»)\n        }\n    }\n    \n    fun main () {\n        val l: IntList = IntList ()\n        l.foo ()\n    }\n\nОн просто прекрасно работает в Kotlin с JVM, но завершается с ошибкой в ​​Kotlin / Native со следующим сообщением:\n\n> Этот тип является окончательным, поэтому он не может быть унаследован от\n\nОшибка указывает на «ArrayList <Int>»\n\nТаким образом, реализация ArrayList в Kotlin / native является окончательной по какой-то причине? Это предназначено? Почему? Если я перейду к определению класса, то здесь нет ключевого слова final, только «фактическое» Реализация JVM также является «актуальной», а не «открытой», но ее можно унаследовать. В своем варианте JS он явно объявлен как «открытый». Что дает?\n\nВсе это верно и для класса HashMap, и, возможно, для других.\n\nЯ протестировал способ создания проекта по умолчанию в IDEA с помощью JVM | Вариант IDEA или родной | Вариант Gradle.","title":"Не может наследовать от ArrayList в Kotlin / Native","subreddit_name_prefixed":"r/Kotlin","ups":5,"created":1570426716,"link_flair_background_color":"","id":"de9u3l","author":{"name":"vitaly_artemiev"},"permalink":"/r/Kotlin/comments/de9u3l/cannot_inherit_from_arraylist_in_kotlinnative/","url":"https://www.reddit.com/r/Kotlin/comments/de9u3l/cannot_inherit_from_arraylist_in_kotlinnative/","created_utc":1570397916}