{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"Я выпустил новую версию своих сопрограмм на основе [Библиотека адаптера для модернизации NetworkResponse]  (https://github.com/haroldadmin/CoroutinesNetworkResponseAdapter) .\n\nЭто адаптер вызовов Retrofit, который может возвращать ответы, заключенные в класс `NetworkResponse`.\n\n### NetworkResponse class\nСетевой ответ представляет собой запечатанный класс Kotlin со следующими тремя состояниями:\n  * Успех: используется для представления успешных ответов (коды ответов 2xx, непустые тела ответов)\n  * ServerError: используется для представления ошибок сервера\n  * NetworkError: Используется для представления ошибок подключения\n\nЗапечатанный класс является общим для двух типов: тип ответа и тип ошибки. Тип ответа - это представление Java / Kotlin ответа API, а тип ошибки - ответ об ошибке, отправленный сервером API. Классы Success и SeverError также позволяют получить доступ к заголовкам, отправленным сервером.\n\nВот как можно использовать ответы, заключенные в класс `NetworkResponse`:\n\n\n`` `\nинтерфейс PersonService {\n  fun getPerson (): Отложено <NetworkResponse <Person, ErrorResponse >>\n}\n\nРепозиторий класса {\n  приостановить веселье getPerson () {\n    val person = executeWithRetry (times = 10) {\n      service.getPerson ()\n    }\n    когда (человек) {\n      такое NetworkResponse.Success -> // Обработка успеха\n      такое NetworkResponse.ServerError -> // Обработка ошибки сервера\n      такое NetworkResponse.NetworkError -> // Обработка сетевой ошибки\n    }\n  }\n}\n`` `\n\n### Почему?\n\nМоделирование ошибок как часть вашего состояния является рекомендуемой практикой. Эта библиотека помогает вам справляться со сценариями, в которых вы можете успешно восстанавливаться после ошибок. Ошибки сервера и проблемы с подключением могут быть легко устранены. В любой другой неожиданной ситуации вы, вероятно, захотите аварийно завершить работу своего приложения, чтобы вы могли посмотреть, что происходит.\n\nАдаптер NetworkResponse обеспечивает гораздо более чистое решение, чем встроенный тип вызовов Retrofit, поскольку он моделирует ошибки как закрытый класс и не заставляет вас думать с точки зрения обратных вызовов. Он построен на основе поддержки сопрограмм, поэтому асинхронные сетевые запросы также становятся намного проще!\n\nМодифицированный адаптер RxJava обрабатывает коды ошибок, отличные от 2xx, как ошибки, что кажется глупым. Ошибка в Rx-потоке должна быть чем-то, что трудно исправить. Это не лучший способ справляться с ошибками в ответах API, поскольку они также могут содержать значимую информацию. Они не должны конкретно рассматриваться в блоках onError.\n\nОднако, поскольку многие вещи рассматриваются как ошибки в адаптере Rx, повторная попытка становится такой же простой, как удаление оператора retry () в середине потока. Хотя решение, предоставляемое этой библиотекой, очень удобно, вы можете взглянуть на служебный метод executeWithRetry. Это функция более высокого порядка, которая может повторить ваши сетевые запросы в случае их сбоя.\n\n\n\nПожалуйста, попробуйте, если хотите, и дайте мне знать ваши мысли!\nВклад в проект очень приветствуется.","title":"Адаптер вызова Retrofit, который представляет ошибки как часть своего состояния ответа","subreddit_name_prefixed":"r/Kotlin","ups":23,"created":1558484460,"link_flair_background_color":"","id":"brcewu","author":{"name":"theharolddev"},"permalink":"/r/Kotlin/comments/brcewu/a_retrofit_call_adapter_that_represents_errors_as/","url":"https://www.reddit.com/r/Kotlin/comments/brcewu/a_retrofit_call_adapter_that_represents_errors_as/","created_utc":1558455660}