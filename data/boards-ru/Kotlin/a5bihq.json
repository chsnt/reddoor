{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"За последние пару лет я изучал реализации реактивных потоков на некоторых популярных языках (где большую часть рынка занимает ReactiveX и его варианты), и недавно я наткнулся на каналы Kotlin, когда услышал о выпуске сопрограмм Kotlin. Я сравнил каналы с небольшим карманом других языков и библиотек, которые также избегают обратных вызовов в ReactiveX для использования сопрограмм вместо этого под общим термином InteractiveX или Ix для краткости ([как придумано разработчиками C #]  ( https://github.com/dotnet/reactive#interactive-extensions) </ SPAN>). Это включает в себя [C #] <span translate = \"no\"> (https://github.com/dotnet/reactive) , [JavaScript]  (https://github.com / ReactiveX / IxJS) , [PHP]  (https://github.com/acrylic-origami/AmpReactor)  (полное раскрытие, PHP принадлежит мне) и [C ++]  (https://github.com/ReactiveX/RxCpp) . Но, боже, если Котлин не самый элегантный. Большинство операторов могут быть написаны менее чем за 10 вызовов функций, что просто смешно. Я думаю, что две функции вместе, кажется, выделяют асинхронность Kotlin: `send ()`, к которой можно получить доступ из внутренних замыканий, где генераторный стиль `yield` не может, и` запуск`, чтобы запустить и забыть сопрограммы; не нашел этот комбо в другом месте.\n\nЯ хотел поделиться руководством по Ix в Kotlin, которое я опубликовал (под влиянием чистого волнения!), Которое включает в себя реализации всех основных типов операторов. Руководство ссылается на некоторые другие мои статьи о Ix, поэтому я также перечислил их ниже. Я надеюсь, что кто-то здесь находит их интересными!\n\n1. [\"Руководство по Ix в Котлине\"]  (https://lam.io/blog/IxKotlin/) \n2. [Суть реализации операторов]  (https://gist.github.com/acrylic-origami/416babc69ccdc59a488f75e1f5fc258d) \n3. [Операторы Ix Barebones]  (https://lam.io/blog/ReactiveX/)  - показывает, что все операторы Ix являются просто асинхронными генераторами плюс переменные условия\n4. [\"Почему операторы ReactiveX сложно создавать, а операторы InteractiveX нет\"]  (https://lam.io/blog/Ix-vs-Rx-operators) ","title":"Каналы Kotlin: столь же изящны, как и ReactiveX","subreddit_name_prefixed":"r/Kotlin","ups":46,"created":1544594371,"link_flair_background_color":"","id":"a5bihq","author":{"name":"concaten8"},"permalink":"/r/Kotlin/comments/a5bihq/kotlins_channels_as_elegant_as_reactivex_gets/","url":"https://www.reddit.com/r/Kotlin/comments/a5bihq/kotlins_channels_as_elegant_as_reactivex_gets/","created_utc":1544565571}