{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"Я только что перевел следующий фрагмент из обязательного в функциональный. Это было весело, но я не думаю, что создал очень элегантный код. У меня нет идей, но у меня есть ощущение, что у Котлина остались некоторые хитрости. Цепочки «карта, затем фильтр» кажутся неуклюжими. Кроме того, используя Pair и Triple для перемещения состояния вперед ...\n\nИмператив:\n\n    fun getFiles (prodRevViewElements: List <Element>): Map <String, String> {\n        val itemRevToFileName = HashMap <String, String> ()\n        для (prodRevViewElement в prodRevViewElements) {\n            val nodeList = prodRevViewElement.getElementsByTagName (\"Представление\")\n            if (nodeList.length! = 1) продолжить\n            val itemId = getPlmXmlUserValue (prodRevViewElement, \"__PLM_ITEM_ID\")\n            val revId = getPlmXmlUserValue (prodRevViewElement, \"__PLM_REVISION_ID\")\n            if (itemId.isNullOrBlank () || revId.isNullOrBlank ()) продолжить\n            val itemRev = \"$ itemId / $ revId\"\n            val presentationElements = nodeList.getElements ()\n            presentationElements.firstOrNull () ?. getAttribute (\"location\") ?. split (\"/\") ?. last (). apply {\n                itemRevToFileName [itemRev] = this.toString ()\n            }\n        }\n        вернуть itemRevToFileName.toMap ()\n    }\n\nФункциональность:\n\n    fun getFiles2 (prodRevViewElements: List <Element>): Map <String, String> {\n        вернуть prodRevViewElements\n            .карта {\n                Pair (it, it.getElementsByTagName (\"Представление\"))\n            }\n            .filter {\n                it.second.length == 1\n            }\n            .карта {\n                val itemId = getPlmXmlUserValue (it.first, \"__PLM_ITEM_ID\")\n                val revId = getPlmXmlUserValue (it.first, \"__PLM_REVISION_ID\")\n                val itemRev = if (itemId.isNullOrBlank () || revId.isNullOrBlank ()) null else \"$ itemId / $ revId\"\n                Triple (it.first, it.second, itemRev)\n            }\n            .filter {\n                it.third! = null\n            }\n            .карта {\n                val presentationElements = it.second.getElements ()\n                val name = presentationElements.firstOrNull () ?. getAttribute (\"location\") ?. split (\"/\") ?. last ()\n                Пара (ит.т.д., имя)\n            }\n            .filter {it.second! = null}\n            .associate {\n                Pair (it.first.toString (), it.second.toString ())\n            }\n    }","title":"[Code Snippet Review] От обязательного к функциональному","subreddit_name_prefixed":"r/Kotlin","ups":11,"created":1558730601,"link_flair_background_color":"","id":"bsgh1x","author":{"name":"tp_12"},"permalink":"/r/Kotlin/comments/bsgh1x/code_snippet_review_from_imperative_to_functional/","url":"https://www.reddit.com/r/Kotlin/comments/bsgh1x/code_snippet_review_from_imperative_to_functional/","created_utc":1558701801}