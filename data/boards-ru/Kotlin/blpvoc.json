{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"Всем привет,\n\nЛенивый делегат инициализирует свойства при доступе в первый раз. Это полезно, когда вычисление свойства является дорогостоящим, и нам не нужно обращаться к нему для каждого экземпляра этого класса.\n\n    class SomeClass {\n        val someLazyProperty by lazy {дорогойCalculation ()}\n    }\n\nВ других случаях мы обязательно получим доступ к свойству, но инициализация требует времени и может выполняться асинхронно (например, выборка данных из базы данных / API REST / и т. Д.). Афаик такого делегата еще не существует.\n\n    класс SomeOtherClass: CoroutineScope от GlobalScope {\n        val someProperty by asyncInit {loadFromDatabase ()}\n    }\n\nВопрос:\n\nВы чувствуете, что нечто подобное должно быть частью библиотеки сопрограмм?\n\n\n\nНиже вы можете найти пример того, как может выглядеть такой делегат. Я также открыт для обратной связи.\n\n    импорт kotlinx.coroutines. *\n    импорт kotlin.properties.ReadOnlyProperty\n    импорт kotlin.reflect.KProperty\n    \n    // Помощник\n    приостановить веселье loadFromDatabase (): Int {\n        Задержка (1000)\n        возврат 42\n    }\n    \n    // Применение\n    класс SomeClass: CoroutineScope от GlobalScope {\n        val данные от asyncInit {loadFromDatabase ()}\n    }\n    \n    // Демонстрация\n    fun main () {\n        val someInstance = SomeClass ()\n        println («Экземпляр создан») // немедленно\n        println («Данные $ {someInstance.data}.») // через 1000 мс\n    }\n    \n    // Делегировать реализацию\n    fun <T> CoroutineScope.asyncInit (инициализатор: suspend () -> T): ReadOnlyProperty <Any ?, T> =\n        AsyncInitializer (это, инициализатор)\n    \n    закрытый класс AsyncInitializer <T> (\n        сфера применения: CoroutineScope,\n        инициализатор: suspend () -> T\n    ): ReadOnlyProperty <Any ?, T>, CoroutineScope по области действия {\n        private val deferred = async {initializer ()}\n        переопределение оператора fun getValue (thisRef: Any ?, свойство: KProperty <*>) = runBlocking {deferred.await ()}\n    }","title":"Загрузка свойств асинхронно с делегатом сопрограммы (по сравнению с ленивым)","subreddit_name_prefixed":"r/Kotlin","ups":9,"created":1557259506,"link_flair_background_color":"","id":"blpvoc","author":{"name":"Astronaut4449"},"permalink":"/r/Kotlin/comments/blpvoc/loading_properties_asynchronously_with_coroutine/","url":"https://www.reddit.com/r/Kotlin/comments/blpvoc/loading_properties_asynchronously_with_coroutine/","created_utc":1557230706}