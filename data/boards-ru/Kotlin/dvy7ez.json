{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Котлин","selftext":"Всем привет :-)\n\nВ настоящее время я изучаю Kotlin для разработки игр.\n\nДля этого я хочу создать абстракции более высокого уровня таких концепций OpenGL, как шейдеры и шейдерные программы. В настоящее время, для любопытства, я портирую существующий код игрового движка из C ++ для сравнения.\n\nЯ столкнулся с проблемой, когда дело доходит до освобождения собственных ресурсов, таких как шейдеры и шейдерные программы, созданные с помощью функций * glCreate *, с использованием * glDelete \\ **.\n\nНапример, в C ++ мне было довольно легко создать класс \"Shader\". В своем конструкторе он может вызвать * glCreateShader *, а затем в деструкторе он может вызвать * glDeleteShader *. Это хорошо работает с умными указателями. Таким образом, я мог бы, например, легко создать два экземпляра шейдерных объектов и передать их объекту * программы шейдера *, зная, что в конце области, в которой я создаю программный объект шейдера, объекты шейдера просто исчезнут. области видимости и быть удаленным (поскольку они не нужны после создания программы шейдера).\n\nВ Kotlin, насколько я вижу, нет простого способа сделать что-то подобное? Кажется, что использование * Finalize * всегда считается неправильным. Другая альтернатива состоит в том, чтобы мои классы-оболочки реализовали * Closeable * и затем имели функцию * use *. Однако это тоже не то, чего я хочу. Для примера программного объекта шейдера я хотел бы создать * два * шейдерных объекта перед передачей их программному объекту шейдера, но такие вещи, как метод * use *, по-видимому, предназначены для одного ресурса за раз.\n\nСуществуют ли альтернативные шаблоны, которые используются в языках сборки мусора, таких как Kotlin или Java, где, кажется, нет хороших альтернатив, чтобы использовать такой же подход, как C ++? Или единственная альтернатива - реализовать собственный подсчет ссылок для классов, выделяющих нативные ресурсы, или просто обязательно вызвать «бесплатный» метод для них?\n\nЧто бы вы, ради других примеров, сделали, если бы вам нужен был класс, который открывает соединение с базой данных в своем конструкторе, но затем хотел бы, чтобы это соединение было долговечным, пока другой код в вашей кодовой базе ссылается на него? Похоже, что подход \"try-with-resource\" -kinda * тоже не сработает.","title":"Обертки OpenGL и RAII в Котлине","subreddit_name_prefixed":"r/Kotlin","ups":18,"created":1573707580,"link_flair_background_color":"","id":"dvy7ez","author":{"name":"PastryGood"},"permalink":"/r/Kotlin/comments/dvy7ez/opengl_wrappers_and_raii_in_kotlin/","url":"https://www.reddit.com/r/Kotlin/comments/dvy7ez/opengl_wrappers_and_raii_in_kotlin/","created_utc":1573678780}