{"subreddit":{"display_name":"Kotlin"},"subreddit_loc":"Kotlin","selftext":"","title":"Negative zero (-0.0) is equal to zero... sometimes.","subreddit_name_prefixed":"r/Kotlin","ups":95,"created":1551835897,"link_flair_background_color":"","id":"axnr0o","author":{"name":"Shemetz"},"permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/","url":"https://i.imgur.com/cGayuTo.png","created_utc":1551807097,"replies":[{"ups":90,"link_id":"t3_axnr0o","replies":[{"ups":10,"link_id":"t3_axnr0o","replies":[{"ups":13,"link_id":"t3_axnr0o","id":"ehvpf08","author":"ExtraTank","parent_id":"t1_ehv9xn6","subreddit_id":"t5_2so2r","body":"I agree! lets burn him at the stake.","body_html":"<div class=\"md\"><p> Я согласен! давайте сожжем его на костре. </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehvpf08/","name":"t1_ehvpf08","created":1551859592,"created_utc":1551830792,"subreddit_name_prefixed":"r/Kotlin","depth":4}],"id":"ehv9urn","author":"hackometer","parent_id":"t1_ehv9rvc","subreddit_id":"t5_2so2r","body":"I just went in and studied it in the IDE :)","body_html":"<div class=\"md\"><p> Я просто вошел и изучил это в IDE :) </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehv9urn/","name":"t1_ehv9urn","created":1551848767,"created_utc":1551819967,"subreddit_name_prefixed":"r/Kotlin","depth":2},{"ups":4,"link_id":"t3_axnr0o","id":"ehvdpup","author":"Blou_Aap","parent_id":"t1_ehv9rvc","subreddit_id":"t5_2so2r","body":"Basically r/theydidthemath","body_html":"<div class=\"md\"><p> В основном <a href=\"/r/theydidthemath\">р / они</a> </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehvdpup/","name":"t1_ehvdpup","created":1551851222,"created_utc":1551822422,"subreddit_name_prefixed":"r/Kotlin","depth":2}],"id":"ehv4e1r","author":"hackometer","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"The discrepancy in the first example (string interpolation) is because Kotlin evaluates `-0.0 == +0.0` at runtime, but evaluates `\"${-0.0 == +0.0}\"`) at compile time, using different logic. This one is a compiler bug that should be reported to JetBrains.\n\nThe discrepancy in the second example, (`Double` vs. `Any`) is that `Any` is a boxed `java.lang.Double` and the contract of `Double.equals` explicitly specifies that it has two behaviors different from the primitive `d1 == d2` expression, one of them being\n\n>If `d1` represents `+0.0` while `d2` represents `-0.0`, or vice versa, the equal test has the value `false`, even though `+0.0==-0.0` has the value `true`.\n\nNow, we can speculate that the constant evaluator the compiler uses in the first example uses an AST representation, a tree with `Double` instances attached, and it uses `equals` to evaluate the equality of what was actually two primitive `double`s.\n\nKnowing this, you may find even more surprising that\n\n    val nz_nullable: Double? = -0.0\n    val pz_nullable: Double? = +0.0\n    println(nz_nullable == pz_nullable)\n\nprints `true` although clearly we have boxed `Double`s here. And the reason for that one is that Kotlin has an intrinsic implementation for the equality of `Double` instances which follows the behavior of primitive values.","body_html":"<div class=\"md\"><p> Расхождение в первом примере (интерполяция строк) связано с тем, что Kotlin оценивает <code>-0.0 == +0.0</code> во время выполнения, но оценивает <code>&quot;${-0.0 == +0.0}&quot;</code> ) во время компиляции, используя другую логику. Это ошибка компилятора, о которой следует сообщать JetBrains. </p><p> Расхождение во втором примере ( <code>Double</code> против <code>Any</code> ) заключается в том, что <code>Any</code> является коробочным <code>java.lang.Double</code> а контракт <code>Double.equals</code> явно указывает, что он имеет два поведения, отличных от примитивного выражения <code>d1 == d2</code> , одно из они будучи </p><blockquote><p> Если <code>d1</code> представляет <code>+0.0</code> то время как <code>d2</code> представляет <code>-0.0</code> или наоборот, равный тест имеет значение <code>false</code> , даже если <code>+0.0==-0.0</code> имеет значение <code>true</code> . </p></blockquote><p> Теперь мы можем предположить, что вычислитель констант, используемый компилятором в первом примере, использует представление AST, дерево с присоединенными экземплярами <code>Double</code> и использует <code>equals</code> для оценки равенства того, что на самом деле было двумя примитивными <code>double</code> s. </p><p> Зная это, вы можете найти еще более удивительным, что </p><pre> <code>val nz_nullable: Double? = -0.0 val pz_nullable: Double? = +0.0 println(nz_nullable == pz_nullable)</code> </pre><p> печатает <code>true</code> хотя явно мы поместили в коробку <code>Double</code> s здесь. И причина этого в том, что у Kotlin есть внутренняя реализация равенства экземпляров <code>Double</code> которая следует поведению примитивных значений. </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehv4e1r/","name":"t1_ehv4e1r","created":1551845189,"created_utc":1551816389,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":28,"link_id":"t3_axnr0o","id":"ehv2rws","author":"rkcr","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"This is going to really mess me up because I have used `-0` \\**looks at notes*\\* approximately zero times in my code, ever.","body_html":"<div class=\"md\"><p> Это действительно испортит меня, потому что я использовал <code>-0</code> * <em>смотрит на заметки</em> * примерно в ноль раз в моем коде, когда-либо. </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehv2rws/","name":"t1_ehv2rws","created":1551844104,"created_utc":1551815304,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":11,"link_id":"t3_axnr0o","replies":[{"ups":1,"link_id":"t3_axnr0o","id":"ehwjl4r","author":"[deleted]","parent_id":"t1_ehwjhqx","subreddit_id":"t5_2so2r","body":"[deleted]","body_html":"<div class=\"md\"><p> [Удалено] </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehwjl4r/","name":"t1_ehwjl4r","created":1551887129,"created_utc":1551858329,"subreddit_name_prefixed":"r/Kotlin","depth":2}],"id":"ehv0t04","author":"hackometer","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"A true Kotlin WAT. Congratulations!","body_html":"<div class=\"md\"><p> Настоящий котлин WAT. Поздравляем! </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehv0t04/","name":"t1_ehv0t04","created":1551842793,"created_utc":1551813993,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":4,"link_id":"t3_axnr0o","replies":[{"ups":8,"link_id":"t3_axnr0o","id":"ehv1uyk","author":"Shemetz","parent_id":"t1_ehuzcel","subreddit_id":"t5_2so2r","body":"It's deprecated for Int, Float, and Double, at least!","body_html":"<div class=\"md\"><p> По крайней мере, это устарело для Int, Float и Double! </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehv1uyk/","name":"t1_ehv1uyk","created":1551843496,"created_utc":1551814696,"subreddit_name_prefixed":"r/Kotlin","depth":2}],"id":"ehuydjf","author":"[deleted]","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"[deleted]","body_html":"<div class=\"md\"><p> [Удалено] </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehuydjf/","name":"t1_ehuydjf","created":1551841214,"created_utc":1551812414,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":4,"link_id":"t3_axnr0o","id":"ehuwx04","author":"fablue","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"Which version of kotlin is this? Jvm or Native?","body_html":"<div class=\"md\"><p> Какая версия kotlin это? JVM или родной? </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehuwx04/","name":"t1_ehuwx04","created":1551840256,"created_utc":1551811456,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":5,"link_id":"t3_axnr0o","id":"ehvt7rb","author":"kk6420420","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"`.equals` is not always identical to `==`\n\n`==` is null safe","body_html":"<div class=\"md\"><p> <code>.equals</code> не всегда идентичен <code>==</code> </p><p> <code>==</code> является нулевым </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehvt7rb/","name":"t1_ehvt7rb","created":1551862607,"created_utc":1551833807,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":3,"link_id":"t3_axnr0o","id":"ehv4msf","author":"two-for-one","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"Something, something equals implementation of boxed vs unboxed types? Also using equality comparison for floating point values...\n\nIf you have the corresponding byte code it might become more obvious what is happening here. ","body_html":"<div class=\"md\"><p> Что-то, что-то равносильно реализации в штучной упаковке против распакованных типов? Также используя сравнение равенства для значений с плавающей запятой ... </p><p> Если у вас есть соответствующий байт-код, может стать более очевидным, что здесь происходит. </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehv4msf/","name":"t1_ehv4msf","created":1551845352,"created_utc":1551816552,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":1,"link_id":"t3_axnr0o","id":"ehwbi62","author":"Human102581162937","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"Neither -0.0 nor +0.0 are null, so for them, it'll always evaluate the same.","body_html":"<div class=\"md\"><p> Ни -0.0, ни +0.0 не равны нулю, поэтому для них он всегда будет одинаковым. </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ehwbi62/","name":"t1_ehwbi62","created":1551877326,"created_utc":1551848526,"subreddit_name_prefixed":"r/Kotlin","depth":0},{"ups":1,"link_id":"t3_axnr0o","id":"ei03410","author":"BeniBela","parent_id":"t3_axnr0o","subreddit_id":"t5_2so2r","body":"Chrome V8 had such issues for JavaScript. It could be exploited to run [arbitrary code](https://www.jaybosamiya.com/blog/2019/01/02/krautflare/)","body_html":"<div class=\"md\"><p> В Chrome V8 были такие проблемы с JavaScript. Это может быть использовано для запуска <a href=\"https://www.jaybosamiya.com/blog/2019/01/02/krautflare/\">произвольного кода</a> </p></div>","permalink":"/r/Kotlin/comments/axnr0o/negative_zero_00_is_equal_to_zero_sometimes/ei03410/","name":"t1_ei03410","created":1552004135,"created_utc":1551975335,"subreddit_name_prefixed":"r/Kotlin","depth":0}]}